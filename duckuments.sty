\NeedsTeXFormat{LaTeX2e}
\RequirePackage{xparse,l3keys2e}
\RequirePackage{letltxmacro}

\def\duckuments@version{v0.1}
\def\duckuments@date{2018/03/12}


\ProvidesExplPackage
  {duckuments}          {\duckuments@date}
  {\duckuments@version} {minimal working duckuments}

\bool_if:nF { \sys_if_engine_luatex_p: || \sys_if_engine_pdftex_p: }
  { %>>>
    \msg_new:nnnn { duckuments } { incompatible } 
      {
        The~duckuments~package~is~currently~only~compatible~with~pdfTeX~and~
        LuaTeX!
      }
      {
        Sorry~for~that.
      }
    \msg_error:nn { duckuments } { incompatible }
    \endinput
  }%<<<

\newcommand*\duckuments@randoms{100}
\newcommand*\duckuments@headings[1]
  {%>>>
    \ifcase#1\relax
      \expandafter\chapter
    \or \expandafter\section
    \or \expandafter\subsection
    \or \expandafter\subsubsection
    \or \expandafter\paragraph
    \else \expandafter\@gobble
    \fi
    {\duckuments@headings@text{#1}}
  }%<<<
\newcommand*\duckuments@headings@level[1]
  {%>>>
    (
    \ifcase#1
      chapter
    \or section
    \or subsection
    \or subsubsection
    \or paragraph
    \fi
    )
  }%<<<
\bool_new:N \l_duckuments_immediate_bool
\bool_new:N \l_duckuments_toc_bool
\bool_new:N \l_duckuments_math_inline_bool
\bool_new:N \l_duckuments_math_display_bool
\keys_define:nn { duckuments }
  {%>>>
    ,toc   .bool_set:N = \l_duckuments_toc_bool
    ,toc   .default:n = true
    ,maths .choice:
    ,maths / both    .code:n =
      {
        \bool_set_true:N \l_duckuments_math_inline_bool
        \bool_set_true:N \l_duckuments_math_display_bool
      }
    ,maths / none    .code:n =
      {
        \bool_set_false:N \l_duckuments_math_inline_bool
        \bool_set_false:N \l_duckuments_math_display_bool
      }
    ,maths / inline  .code:n = \bool_set_true:N \l_duckuments_math_inline_bool
    ,maths / display .code:n = \bool_set_true:N \l_duckuments_math_display_bool
    ,maths .default:n = both
    ,immediate .bool_set:N = \l_duckuments_immediate_bool
    ,immediate .default:n = true
  }%<<<
\ProcessKeysOptions { duckuments }
\NewDocumentCommand \duckument { O{} }
  {%>>>
    \group_begin:
    \keys_set:nn { duckuments } { #1 }
    \bool_if:NT \l_duckuments_toc_bool { \tableofcontents }
    \cs_if_exist_use:NT \chapter
      { {\duckuments@headings@text{0}} \blindduck }
    \duckuments@headings{1} \blindduck
    \duckuments@headings{2} \blindduck
    \duckuments@headings{3} \blindduck
    \duckuments@headings{4} \blindduck
    \section {Lists}
    \duckuments_list_example:n { itemize }
    \duckuments_list_example:n { enumerate }
    \duckuments_list_example:n { description }
    \group_end:
  }%<<<
\NewDocumentCommand \blindduck { O{} }
  {%>>>
    \group_begin:
    \keys_set:nn { duckuments } { #1 }
    \duckuments@blindduck@text
    \group_end:
  }%<<<
\newcommand*\duckuments@ifinline[2][]
  { \bool_if:NTF \l_duckuments_math_inline_bool { #2 } { #1 } }
\newcommand*\duckuments@ifdisplay[2][]
  { \bool_if:NTF \l_duckuments_math_display_bool { #2 } { #1 } }
\cs_new_protected_nopar:Nn \duckuments_list_example:n
  {%>>>
    \subsection{Example\ for\ ducks\ (#1)}
    \cs_if_exist_use:c {duck#1}
    \subsubsection{Nested\ ducks}
    \ducklistlist { #1 }
  }%<<<
\NewDocumentCommand \ducklistlist { m }
  {%>>>
    \tl_if_eq:nnTF { #1 } { description }
      { \duckdescriptiondescription }
      { \duckuments@listlist{#1} }
  }%<<<
\newcommand*\duckuments@enquote [1]
  {%>>>
    \cs_if_exist_use:NTF
      \enquote { #1 }
      {``#1''}
  }%<<<
\regex_const:Nn \c_duckuments_regex
  { example-image-duck|example-image-duck.pdf }
\cs_new_protected_nopar:Nn \duckuments_patch_includegraphics:
  {%>>>
    \cs_if_exist:NT \includegraphics
      {%
        \LetLtxMacro\duckuments@includegraphicsBAK\includegraphics
        \RenewDocumentCommand \includegraphics
          { >{\duckuments_starred:n}s O{} m }
          {
            \regex_match:NnTF \c_duckuments_regex { ##3 }
              {
                \duckuments@includegraphicsBAK##1
                  [page=\int_rand:nn{1}{\duckuments@randoms},##2] { ##3 }
              }
              {
                \duckuments@includegraphicsBAK##1[##2]{##3}
              }
          }
      }
  }%<<<
\cs_new_protected:Nn \duckuments_starred:n
  {%>>>
    \IfBooleanTF { #1 }
      { \def\ProcessedArgument{*} }
      { \def\ProcessedArgument{} } 
  }%<<<
\bool_if:NTF \l_duckuments_immediate_bool
  { \duckuments_patch_includegraphics: }
  { \AtBeginDocument { \duckuments_patch_includegraphics: } }
\ExplSyntaxOff

\newcommand*\duckuments@blindduck@text
  {%>>>
    There once was a very smart but sadly blind duck. When it was still a small
    duckling it was renowned for its good vision. But sadly as the duck grew
    older it caught a sickness which caused its eyesight to worsen. It became so
    bad, that the duck couldn't read the notes it once took containing much of
    inline math\duckuments@ifinline{ just like its favoured equation: $d = u_c
    \cdot k$}. Only displayed equations remained legible%
    \duckuments@ifdisplay[.]{ so it could still read \begin{equation}d = r a^k
    e\hbox{.}\end{equation}} That annoyed the smart duck, as it wasn't able to
    do its research any longer. It called for its underduckling and said:
    \duckuments@enquote{Go, find me the best eye ducktor there is. He shall
    heal me from my disease!}%
  }%<<<

\newcommand*\duckuments@headings@text[1]
  {A friendly duck at level #1 \duckuments@headings@level{#1}}

\newcommand*\ducklists@content
  {%>>>
    \item First swims father drake
    \item Then floats mother duck
    \item After her paddles baby duckling
    \item And over there bathes uncle canard
  }%<<<
\newcommand*\duckenumerate{\begin{enumerate}\ducklists@content\end{enumerate}}
\newcommand*\duckitemize{\begin{itemize}\ducklists@content\end{itemize}}
\newcommand*\duckdescription
  {%>>>
    \begin{description}
      \item[drake] is the swimming father
      \item[duck] is the floating mother
      \item[duckling] is the paddling baby
      \item[canard] is the bathing uncle
    \end{description}%
  }%<<<
\newcommand*\duckuments@listlist[1]
  {%>>>
    \begin{#1}
      \item swimming father drake
        \begin{#1}
          \item swimming father drake
            \begin{#1}
              \item swimming father drake
                \begin{#1}
                  \item swimming father drake
                  \item floating mother duck
                \end{#1}
              \item floating mother duck
            \end{#1}
          \item floating mother duck
        \end{#1}
      \item floating mother duck
    \end{#1}%
  }%<<<
\newcommand*\duckdescriptiondescription
  {%>>>
    \begin{description}
      \item[drake] is the swimming father
        \begin{description}
          \item[drake] is the swimming father
            \begin{description}
              \item[drake] is the swimming father
                \begin{description}
                  \item[drake] is the swimming father
                  \item[duck] is the floating mother
                \end{description}
              \item[duck] is the floating mother
            \end{description}
          \item[duck] is the floating mother
        \end{description}
      \item[duck] is the floating mother
    \end{description}%
  }%<<<
\endinput
